{"version":3,"sources":["static/wikipedia-crawler.png","static/nhof.png","static/color-game.png","static/relax.png","components/wave.js","components/sea-class.js","components/sea.js","components/sky.js","components/contact.js","constants/project-data.js","components/projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wave","sea","index","layer","coordinates","top","left","right","maxWidth","canvas","width","maxHeight","height","push","Math","floor","random","life","this","age","waveWidth","color","beginPath","moveTo","lineTo","closePath","fillStyle","fill","factor","waveHeight","SeaClass","ceil","window","innerHeight","innerWidth","seaContext","getContext","seaElement","context","waves","length","initial","setInterval","moveWaves","clearRect","forEach","wave","idx","move","newWaves","filter","Sea","seaInstance","seaRef","projectsVisible","props","id","className","ref","node","Component","Sky","Contact","toggleProjects","href","src","onClick","ProjectData","title","liveURL","githubRepo","image","wikiImg","description","nhofIng","cgImg","relaxImg","Projects","visible","map","project","key","alt","target","style","opacity","App","state","setState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5b4eebc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wikipedia-crawler.9951366e.png\";","module.exports = __webpack_public_path__ + \"static/media/nhof.9399243c.png\";","module.exports = __webpack_public_path__ + \"static/media/color-game.a196fe96.png\";","module.exports = __webpack_public_path__ + \"static/media/relax.903de989.png\";","class Wave {\n  constructor ({\n    sea,\n    layer = 0,\n    index,\n  }) {\n    const coordinates = {\n      top: [],\n      left: [],\n      right: [],\n    };\n\n    const colors = ['#50617c', '#5a6d8c', '#63799c', '#7386a5',];\n    const maxWidth = sea.canvas.width;\n    const maxHeight = sea.canvas.height;\n\n    coordinates.top.push(Math.floor(\n      Math.random() * (maxWidth + 50)\n    ));\n\n    const life = 10 + Math.floor(Math.random() * 10)\n    this.life = life\n    this.age = 0\n\n    coordinates.top.push(\n      Math.floor((Math.random() ** 3) * (maxHeight)) + 1\n    );\n\n    let waveWidth =  50 * life + Math.floor( (Math.random()) * life * 2);\n    this.width = waveWidth;\n\n    waveWidth = Math.floor(\n      waveWidth * (coordinates.top[1] / (maxHeight + 100))\n    );\n\n\n    coordinates.right.push(coordinates.top[0] + waveWidth);\n    coordinates.right.push(coordinates.top[1]);\n\n    coordinates.left.push(coordinates.top[0] - waveWidth);\n    coordinates.left.push(coordinates.top[1]);\n\n    this.color = colors[Math.floor(Math.random() * 4)];\n    \n    sea.beginPath();\n    sea.moveTo(...coordinates.top);\n    sea.lineTo(...coordinates.left);\n    sea.lineTo(...coordinates.right);\n    sea.closePath();\n    sea.fillStyle = this.color\n    sea.fill();\n    this.coordinates = coordinates;\n    this.index = index;\n    this.sea = sea;\n\n    // const period = Math.floor(2.5 + Math.floor(Math.random() * 2.5)) * 200;\n    // const deterioration = Math.floor(5 + Math.floor(Math.random() * 5)) * 200;\n  }\n\n  move() {\n    const {\n      coordinates,\n      sea,\n      width,\n      age,\n      life,\n      color,\n    } = this;\n\n    const factor = coordinates.top[1] / (sea.canvas.height + 100)\n\n    coordinates.top[1] += factor;\n    coordinates.left[1] += factor;\n    coordinates.right[1] += factor;\n\n    let waveWidth = Math.floor(\n      width * factor\n    );\n\n    let waveHeight = (-(((age / 4 - life) ** 2) / life) + life) * factor;\n\n    this.age = age + 1\n\n    coordinates.right[0] = coordinates.top[0] + waveWidth;\n    coordinates.right[1] = coordinates.top[1] + waveHeight;\n\n    coordinates.left[0] = coordinates.top[0] - waveWidth;\n    coordinates.left[1] = coordinates.top[1] + waveHeight;\n\n\n    sea.beginPath();\n    sea.moveTo(...coordinates.top);\n    sea.lineTo(...coordinates.left);\n    sea.lineTo(...coordinates.right);\n    sea.closePath();\n    sea.fillStyle = color;\n    sea.fill();\n\n    return coordinates.top[1] > sea.canvas.height || (waveHeight < 0 && age > life);\n  }\n\n  drop() {\n\n  }\n\n  delete() {\n\n  }\n}\n\nexport default Wave;\n","import Wave from './wave';\n\nclass SeaClass {\n  constructor (canvas) {\n    const maxHeight = Math.ceil(window.innerHeight * 0.7);\n    const maxWidth = Math.ceil(window.innerWidth);\n    canvas.width = maxWidth;\n    canvas.height = maxHeight;\n    const seaContext = canvas.getContext('2d');\n\n    this.width = maxWidth;\n    this.height = maxHeight;\n    this.seaElement = canvas;\n    this.context = seaContext;\n    this.waves = [];\n\n    while (this.waves.length < 1000) {\n      this.waves.push(new Wave({\n        sea: seaContext,\n        initial: true,\n      }));\n    }\n    setInterval(() => this.moveWaves(), 25);\n  }\n  moveWaves() {\n    const {\n      context,\n      waves,\n    } = this;\n\n    context.clearRect(0, 0, 2000, 2000);\n    waves.forEach((wave, idx) => {\n      const deleteWave = wave.move();\n      if (deleteWave) waves[idx] = false;\n    });\n\n    \n    const newWaves = waves.filter(wave => wave);\n\n    while (newWaves.length < 1000) {\n      newWaves.push(new Wave({ sea: context, initial: true }));\n    }\n\n    this.waves = newWaves;\n  }\n}\n\nexport default SeaClass;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport SeaClass from './sea-class'\n\nclass Sea extends Component {\n  componentDidMount() {\n    this.seaInstance = new SeaClass(this.seaRef)\n  }\n\n  seaInstance = null\n  seaRef = null\n\n  render () {\n    const {\n      projectsVisible,\n    } = this.props\n\n    return (\n      <canvas\n        id='sea'\n        className={`${projectsVisible ? 'moved-down' : ''}`}\n\t\t\t\twidth='0'\n        height='0'\n        ref={node => this.seaRef = node }\n\t\t\t/>\n    );\n  }\n}\n\nSea.propTypes = {\n\tprojectsVisible: PropTypes.bool.isRequired,\n}\n\nexport default Sea;\n","import React, { Component } from 'react';\n\nclass Sky extends Component {\n  render () {\n    return (\n      <div id=\"sky\" />\n    );\n  }\n}\n\nexport default Sky;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Contact = ({ toggleProjects, projectsVisible }) => (\n\t<section id='contact' className={`${projectsVisible ? 'moved-down' : ''}`}>\n\t\t<a href='mailto:theimberger@gmail.com' className='email'>\n\t\t\t<h1>t heimberger</h1>\n\t\t\t<p>(at gmail)</p>\n\t\t</a>\n\t\t<div id='extra-links'>\n\t\t\t<a href='https://github.com/theimberger'><img src='./static/images/github.png' /></a>\n\t\t\t<a href='https://www.linkedin.com/in/thomas-heimberger-46b255141/'><img src='./static/images/linkedin.png' /></a>\n\t\t\t<button onClick={toggleProjects(!projectsVisible)}>see some work</button>\n\t\t</div>\n\t</section>\n)\n\nContact.propTypes = {\n\ttoggleProjects: PropTypes.func.isRequired,\n\tprojectsVisible: PropTypes.bool.isRequired,\n}\n\nexport default Contact;\n","import wikiImg from '../static/wikipedia-crawler.png'\nimport nhofIng from '../static/nhof.png'\nimport cgImg from '../static/color-game.png'\nimport relaxImg from '../static/relax.png'\n\nconst ProjectData = [\n  {\n    id: 10,\n    title: 'wikipedia crawler',\n    liveURL: 'https://theimberger.github.io/wikipedia_crawler/',\n    githubRepo: 'https://github.com/theimberger/wikipedia_crawler',\n    image: wikiImg,\n    description: 'A JavaScript based web game that traverses between two user given topics.  Think \\'Six Degrees of Kevin Bacon\\' but more flexible.  The crawler\\'s path is visualized using D3 as a poly tree.',\n  },\n  {\n    id: 11,\n    title: 'the name hall of fame',\n    liveURL: 'http://www.namehalloffame.org',\n    githubRepo: 'https://github.com/theimberger/nhof',\n    image: nhofIng,\n    description: 'The Name Hall of Fame is a pet project I worked on with my brother (a graphic designer), Max Heimberger. The idea is born of inside joke between us and our friend Collin and the purpose is to document the greatest names ever bequeathed.  It uses a React frontend and a Rails backend.',\n  },\n  {\n    id: 12,\n    title: 'a simple color game',\n    liveURL: 'https://github.com/theimberger/color-game',\n    githubRepo: 'https://theimberger.github.io/color-game/',\n    image: cgImg,\n    description: 'A basic game where the player identifies the off-color tile.  Built so I could learn more about Vue.js.',\n  },\n  {\n    id: 13,\n    title: 'relax',\n    liveURL: 'http://www.relax-chat.com/',\n    githubRepo: 'https://github.com/theimberger/relax',\n    image: relaxImg,\n    description: 'A clone of the workspace chat app slack.  Built using React and Ruby on Rails.  Hosted on Heroku, uses web socketing to maintain realtime server-client connections.',\n  },\n]\n\nexport default ProjectData","import React from 'react'\nimport ProjectData from '../constants/project-data'\n\nconst Projects = ({visible}) => {\n  return (\n    <main className={visible ? 'visible' : ''}>\n      <ul>\n        { ProjectData.map(project => (\n          <li key={project.id}>\n            <img src={project.image} alt={project.title} className='project-image'/ >\n            <h2>{project.title}</h2>\n            <span className='project-links'>\n              <a target='_blank' href={project.liveURL}>\n                see it live\n              </a> / <a target='_blank' href={project.githubRepo}>\n                see the code\n              </a>\n            </span>\n            <p>{project.description}</p>\n          </li>\n        ))}\n        <li style={{ opacity: 0 }}></li>\n      </ul>\n      <div className='projects-overlay'></div>\n    </main>\n  );\n}\n\nexport default Projects;","import React, { Component } from 'react';\nimport { Sea, Sky, Contact, Projects } from './components'\n\nclass App extends Component {\n  state = {\n    projectsVisible: false,\n  }\n\n  toggleProjects = (projectsVisible) => () => { this.setState({ projectsVisible }) }\n\n  render() {\n    const {\n      state: { projectsVisible },\n      toggleProjects,\n    } = this\n\n    return (\n      <div className=\"App\">\n        <Sky projectsVisible={projectsVisible} />\n        <Sea projectsVisible={projectsVisible} />\n        <Contact toggleProjects={toggleProjects} projectsVisible={projectsVisible} />\n        <Projects visible={projectsVisible} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}